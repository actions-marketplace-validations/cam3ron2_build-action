name: 'Predefined Build/Test/Push'
description: 'Builds a docker image and pushes to one or more registries'
author: '@cam3ron2'
branding:
  icon: 'terminal'
  color: 'blue'

inputs:
  file:
    description: 'Path to the Dockerfile'
    default: 'Dockerfile'
    required: false
  context:
    description: "Build's context is the set of files located in the specified PATH or URL"
    default: '.'
    required: false
  build-args:
    description: 'Arguments to pass to the Dockerfile'
    default: ''
    required: false
  registry:
    # for multiple registry usage users should be using a matrix strategy on their
    # github workflow. Because of the cache artifact, build time will not increase.
    description: 'Registry that houses the repository'
    default: ''
    required: false
  repository:
    description: 'Repository to push to'
    default: ''
    required: true
  push:
    description: 'Push the image to the registry'
    default: 'true'
    required: false
  username:
    description: 'Username for the registry'
    default: ''
    required: false
  password:
    description: 'Password for the registry'
    default: ''
    required: false
  publish-cache:
    description: 'If true, create an artifact'
    default: 'true'
    required: false

outputs:
  imageid:
    description: 'Image ID'
    value: '{{ steps.push.imageid }}'
  digest:
    description: 'Image digest'
    value: '{{ steps.push.digest }}'
  metadata:
    description: 'Build result metadata'
    value: '{{ steps.push.metadata }}'

runs:
  using: 'composite'
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ inputs.registry }}/{{ inputs.repository }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Retrieve Cache
      id: retrieve-cache
      if: ${{ inputs.publish-cache == 'true' }}
      uses: actions/download-artifact@v3
      with:
        name: buildx-cache
        path: /tmp/.buildx-cache-new
    - name: Allow Cache-Pull Failure
      if: ${{ steps.retrieve-cache.status != 'success' }}
      shell: bash
      run: echo "Cache-Pull Failure, Proceeding without Cache"
    # BEGIN LOGIN
    # DockerHub
    - name: Login to DockerHub via Inputs
      if: |
        ${{ (
          (inputs.registry == 'hub.docker.io') || 
          (inputs.registry == 'docker.io') || 
          (inputs.registry == 'dockerhub') || 
          (inputs.registry == '')
        ) && (
          (inputs.username != '') && (inputs.password != '')
        ) && (
          (github.event_name != 'pull_request')
        ) }}
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - name: Login to DockerHub via env
      if: |
        ${{ (
          (inputs.registry == 'hub.docker.io') || 
          (inputs.registry == 'docker.io') || 
          (inputs.registry == 'dockerhub') || 
          (inputs.registry == '')
        ) && (
          (env.REGISTRY_USERNAME != '') && (env.REGISTRY_TOKEN != '')
        ) && (
          (github.event_name != 'pull_request')
        ) }}
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    # GHCR
    - name: Login to GHCR via Inputs
      if: |
        ${{ (
          contains(inputs.registry,'ghcr.io')
        ) && (
          (inputs.username != '') && (inputs.password != '')
        ) }}
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - name: Login to GHCR via env
      if: |
        ${{ (
          contains(inputs.registry,'ghcr.io')
        ) && (
          (github.repository_owner != '') && (env.GITHUB_TOKEN != '')
        ) }}
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.repository_owner }}
        password: ${{ env.GITHUB_TOKEN }}
    # ECR
    # to obtain/set credentials, see https://github.com/aws-actions/configure-aws-credentials
    - name: Login to Amazon ECR
      if: contains(inputs.registry,'amazonaws.com')
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Login to Amazon ECR Public
      if: contains(inputs.registry,'public.ecr.aws')
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public
    # all others
    - name: Login to Registry via Inputs
      if: |
        ${{ (
          contains(inputs.registry,'azurecr.io') ||
          contains(inputs.registry,'gcr.io') ||
          (inputs.registry != '')
        ) && (
          (inputs.username != '') && (inputs.password != '')
        ) && (
          (github.event_name != 'pull_request')
        ) }}
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}
    - name: Login to Registry via env
      if: |
        ${{ (
          contains(inputs.registry,'azurecr.io') ||
          contains(inputs.registry,'gcr.io') ||
          (inputs.registry != '')
        ) && (
          (env.REGISTRY_USERNAME != '') && (env.REGISTRY_TOKEN != '')
        ) && (
          (github.event_name != 'pull_request')
        ) }}
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    # END LOGIN
    - name: Build
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        build-args: ${{ inputs.build-args }}
        # we migh not be able to load multiarch, so we need to test this.
        platforms: linux/amd64,linux/arm64
        push: false
        pull: true
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    # snyk, wiz and other tests here
    # end tests
    - name: Push
      if: github.event_name != 'pull_request'
      id: push
      uses: docker/build-push-action@v3
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.file }}
        build-args: ${{ inputs.build-args }}
        platforms: linux/amd64,linux/arm64
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=local,src=/tmp/.buildx-cache-new
        cache-to: type=local,dest=/tmp/.buildx-cache-new
    - name: Publish Cache
      if: ${{ (inputs.publish-cache == 'true') && (github.event_name != 'pull_request') }}
      uses: actions/upload-artifact@v3
      with:
        name: buildx-cache
        path: /tmp/.buildx-cache-new
        if-no-files-found: error
        retention-days: 90
